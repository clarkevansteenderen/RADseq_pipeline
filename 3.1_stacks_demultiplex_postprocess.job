#!/bin/bash

############################################################################################
# Submit this script as a job using:
# qsub stacks_demultiplex_postprocess.job
############################################################################################

#PBS -l select=4:ncpus=24:mpiprocs=24
#PBS -P CBBI1682
#PBS -q normal
#PBS -l walltime=5:00:00
#PBS -o /mnt/lustre/users/cvansteenderen/RADseq_nodiflorum/rawdata/basespace/stacksoutput/demux_postproc_stdout.txt
#PBS -e /mnt/lustre/users/cvansteenderen/RADseq_nodiflorum/rawdata/basespace/stacksoutput/demux_postproc_stderr.txt
#PBS -N stacks_demux_postprocess
#PBS -M vsteenderen@gmail.com
#PBS -m abe

##############################################################

# Specify number of plates
NUM_PLATES=1

BASE_DIR="/mnt/lustre/users/cvansteenderen/RADseq_nodiflorum/rawdata/basespace"
cd "$BASE_DIR/stacksoutput"

##############################################################
# Create a combined folder and copy files over from all plates (1 or 2)
##############################################################

# Create a folder for all samples called "combined_plates"
# This will house all the samples from all plates in one folder 
mkdir -p combined_plates

# Loop through the plates and copy the files
for plate in $(seq 1 "$NUM_PLATES"); do
    PLATE_DIR="plate_${plate}"

    if [ -d "$PLATE_DIR" ]; then
        cp "$PLATE_DIR"/* combined_plates/
    else
        echo "Warning: Directory $PLATE_DIR does not exist. Skipping..."
    fi
done

cd "$BASE_DIR/stacksoutput/combined_plates"

# Delete the .rem. files in the combined_plates folder 
rm -r *rem*

# Remove the folders with small sizes, and put them in a folder called "removed_zipped"
mkdir -p ./removed_zipped
find -type f -exec du -sb {} \; | awk '$1 < 100' | cut -f2- | xargs -I {} mv {} ./removed_zipped

# Move all the fq.gz files into a new folder, so that this new folder contains only sample files for further processing (excluding txt files and others)
mkdir -p ./ready
mv *.fq.gz ./ready

############################################################################################################################################
# Since some samples were removed (small file size, quality etc.), we need to create an updated list of samples with population information

# extract the sample names from the “ready” folder, so that you can create a population file with each sample name, and the population it comes from. 
# Here, we’re keeping the sample names, excluding the last .1 or .2 from the name, and then deleting the resulting duplicate names. E.g. there will be CI11.1.1.1 and
# CI11.1.1.2 for read 1 and read 2. After deleting the .1 and .2, we’ll have two CI11.1.1 names → that’s why we delete duplicates

find ./ready -type f -name '*.fq.gz' | sed 's|.*/||; s/\.fq\.gz$//' | sed 's/\.[0-9]*$//' | sort -u > samplenames.txt

# Now sort through the file with population assignments for all samples (pops_all.txt), and allocate the correct population group to the right samples

# first sort the pops_all.txt file

sort "$BASE_DIR/barcodes/pops_all.txt" -o "$BASE_DIR/barcodes/pops_all.txt"
# process other population files if desired, for alternative predefined groupings
#sort "$BASE_DIR/barcodes/pops_all_sa.txt" -o "$BASE_DIR/stacksoutput/barcodes/pops_all_sa.txt"
 
# now join the population group names in pops_all.txt to the sample names in samplenames.txt
# write the results to bothplates_pops.txt in the barcodes/ folder
# -t $'\t' ensures a tab space between the sample name and population name assigned

# even if there was only one plate, the output file is called "both_plates_pops.txt" -> leave as is to keep it simple
join -t $'\t' "$BASE_DIR/barcodes/pops_all.txt" "$BASE_DIR/stacksoutput/combined_plates/samplenames.txt" > "$BASE_DIR/barcodes/bothplates_pops.txt"

##############################################################

# This last part takes all the samples in the /ready folder, creates copies of every five pairs (i.e. five samples, ten files),
# and puts them into subdivided folders. This is so that we can run stacks_denovo on smaller subsets of the data, by providing
# each subfolder that only contains 5 samples. We can then submit multiple jobs that can run simultaneously, all writing output
# to the same place

# Set the source folder (where your .fq.gz files are located)
SOURCE_FOLDER="$BASE_DIR/stacksoutput/combined_plates/ready"

# Set the destination base folder
DEST_FOLDER="$BASE_DIR/stacksoutput/combined_plates"

# Create an array of file names in the source folder
files=($(ls $SOURCE_FOLDER/*.fq.gz))

# Initialize counter for subdirectory naming
subfolder_count=1

# Loop through the files in groups of 5
for ((i=0; i<${#files[@]}; i+=10)); do
    # Create a subfolder for each group of 5 file pairs
    subfolder="$DEST_FOLDER/ready_sub$subfolder_count"
    mkdir -p "$subfolder"

    # Copy corresponding file pairs (i.e., every 2 files per sample)
    for ((j=i; j<i+10; j+=2)); do
        if [ -e "${files[j]}" ]; then
            cp "${files[j]}" "$subfolder"
        fi
        if [ -e "${files[j+1]}" ]; then
            cp "${files[j+1]}" "$subfolder"
        fi
    done

    # Increment subfolder counter
    ((subfolder_count++))
done

# now also create subdivided pop files

#!/bin/bash

# Input file
INPUT_FILE="$BASE_DIR/barcodes/bothplates_pops.txt"

# Define the output folder (optional: create it if it doesn't exist)
OUTPUT_DIR="$BASE_DIR/barcodes/"

# Split the file into chunks of 5 lines and save as sub1, sub2, etc.
split -l 5 "$INPUT_FILE" "$OUTPUT_DIR/sub"

# Rename the split files to the desired format sub1_pops.txt, sub2_pops.txt, etc.
counter=1
for f in $OUTPUT_DIR/sub*; do
    mv "$f" "$OUTPUT_DIR/sub${counter}_pops.txt"
    ((counter++))
done
