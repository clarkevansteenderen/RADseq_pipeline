#!/bin/bash

############################################################################################
# Submit this script as a job using:
# qsub stacks_demultiplex.job
############################################################################################

#PBS -l select=4:ncpus=24:mpiprocs=24
#PBS -P CBBI1682
#PBS -q normal
#PBS -l walltime=24:00:00
#PBS -o /mnt/lustre/users/cvansteenderen/RADseq/IcePlant.RawData/Ice_L1/stacksoutput/demux_stdout.txt
#PBS -e /mnt/lustre/users/cvansteenderen/RADseq/IcePlant.RawData/Ice_L1/stacksoutput/demux_stderr.txt
#PBS -N stacks_demux
#PBS -M vsteenderen@gmail.com
#PBS -m abe

##############################################################

module add chpc/BIOMODULES
module add stacks

# Specify number of plates
NUM_PLATES=1

BASE_DIR="/mnt/lustre/users/cvansteenderen/RADseq_nodiflorum/rawdata"

# Make sure you have created a "barcodes" folder, which contains internal index and population files
# E.g. if only one plate, then you should have: barcodes/internal_indexes_plate_1 and barcodes/pops_all.txt

mkdir -p "$BASE_DIR/stacksoutput"

# Loop through the number of plates (1 or 2 plates)
for plate in $(seq 1 "$NUM_PLATES"); do
    PLATE_DIR="plate_$plate"
    
    if [ -d "$PLATE_DIR" ]; then
        echo "Demultiplexing $PLATE_DIR..."
        
        # Set the corresponding barcode file
        BARCODE_FILE="./barcodes/internal_indexes_plate_${plate}.txt"
        OUTPUT_DIR="./stacksoutput/plate_${plate}/"
        
        # Run process_radtags for each plate
        process_radtags -P -p ./$PLATE_DIR -b $BARCODE_FILE -o $OUTPUT_DIR \
                        -c -q -r -D -t 140 --inline_inline --renz_1 mspI --renz_2 ecoRI --barcode-dist-2 2 --filter-illumina
    else
        echo "Warning: Directory $PLATE_DIR does not exist. Skipping..."
    fi
done

##############################################################
# Create a combined folder and copy files from all plates (1 or 2)
##############################################################

cd "$BASE_DIR/stacksoutput"

# Create a folder for all samples called "combined_plates"
mkdir -p combined_plates

# Loop through the plates and copy the files
for plate in $(seq 1 "$NUM_PLATES"); do
    PLATE_DIR="plate_${plate}"

    if [ -d "$PLATE_DIR" ]; then
        cp "$PLATE_DIR"/* combined_plates/
    else
        echo "Warning: Directory $PLATE_DIR does not exist. Skipping..."
    fi
done

cd "$BASE_DIR/stacksoutput/combined_plates"

# Delete the .rem. files in the combined_plates folder 
rm -r *rem*

# Remove the folders with small sizes, and put them in a folder called "removed_zipped"
mkdir -p ./removed_zipped
find -type f -exec du -sb {} \; | awk '$1 < 100' | cut -f2- | xargs -I {} mv {} ./removed_zipped

# Move all the fq.gz files into a new folder, so that this new folder contains only sample files for further processing (excluding txt files and others)
mkdir -p ./ready
mv *.fq.gz ./ready

############################################################################################################################################
# Since some samples were removed (small file size, quality etc.), we need to create an updated list of samples with population information

# extract the sample names from the “ready” folder, so that you can create a population file with each sample name, and the population it comes from. 
# Here, we’re keeping the sample names, excluding the last .1 or .2 from the name, and then deleting the resulting duplicate names. E.g. there will be CI11.1.1.1 and
# CI11.1.1.2 for read 1 and read 2. After deleting the .1 and .2, we’ll have two CI11.1.1 names → that’s why we delete duplicates

find ./ready -type f -name '*.fq.gz' | sed 's|.*/||; s/\.fq\.gz$//' | sed 's/\.[0-9]*$//' | sort -u > samplenames.txt

# Now sort through the file with population assignments for all samples (pops_all.txt), and allocate the correct population group to the right samples

# first sort the pops_all.txt file

sort "$BASE_DIR/barcodes/pops_all.txt" -o "$BASE_DIR/barcodes/pops_all.txt"
# process other population files if desired, for alternative predefined groupings
#sort "$BASE_DIR/barcodes/pops_all_sa.txt" -o "$BASE_DIR/stacksoutput/barcodes/pops_all_sa.txt"
 
# now join the population group names in pops_all.txt to the sample names in samplenames.txt
# write the results to bothplates_pops.txt in the barcodes/ folder
# -t $'\t' ensures a tab space between the sample name and population name assigned

# even if there was only one plate, the output file is called "both_plates_pops.txt" -> leave as is to keep it simple
join -t $'\t' "$BASE_DIR/barcodes/pops_all.txt" "$BASE_DIR/stacksoutput/combined_plates/samplenames.txt" > "$BASE_DIR/barcodes/bothplates_pops.txt"

##############################################################
